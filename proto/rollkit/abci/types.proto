syntax = "proto3";
package rollkit.abci;

option go_package = "github.com/rollkit/rollkit/abci/types";

// For more information on gogo.proto, see:
// https://github.com/gogo/protobuf/blob/master/extensions.md
import "tendermint/crypto/proof.proto";
import "tendermint/abci/types.proto";
import "gogoproto/gogo.proto";

// This file is copied from http://github.com/tendermint/abci
// NOTE: When using custom types, mind the warnings.
// https://github.com/gogo/protobuf/blob/master/custom_types.md#warnings-and-issues

//----------------------------------------
// Request types

message Request {
  oneof value {
    tendermint.abci.RequestEcho               echo                 = 1;
    tendermint.abci.RequestFlush              flush                = 2;
    tendermint.abci.RequestInfo               info                 = 3;
    tendermint.abci.RequestSetOption          set_option           = 4;
    tendermint.abci.RequestInitChain          init_chain           = 5;
    tendermint.abci.RequestQuery              query                = 6;
    tendermint.abci.RequestBeginBlock         begin_block          = 7;
    tendermint.abci.RequestCheckTx            check_tx             = 8;
    tendermint.abci.RequestDeliverTx          deliver_tx           = 9;
    tendermint.abci.RequestEndBlock           end_block            = 10;
    tendermint.abci.RequestCommit             commit               = 11;
    tendermint.abci.RequestListSnapshots      list_snapshots       = 12;
    tendermint.abci.RequestOfferSnapshot      offer_snapshot       = 13;
    tendermint.abci.RequestLoadSnapshotChunk  load_snapshot_chunk  = 14;
    tendermint.abci.RequestApplySnapshotChunk apply_snapshot_chunk = 15;
    RequestGetAppHash         get_app_hash         = 16;
    RequestGenerateFraudProof generate_fraud_proof = 17;
    RequestVerifyFraudProof   verify_fraud_proof   = 18;
  }
}

// Gets the current appHash
message RequestGetAppHash {}

// Generates a fraud proof
message RequestGenerateFraudProof {
  tendermint.abci.RequestBeginBlock begin_block_request = 1 [(gogoproto.nullable) = false];
  repeated tendermint.abci.RequestDeliverTx deliver_tx_requests = 2;
  tendermint.abci.RequestEndBlock end_block_request = 3;
}

// Verifies a fraud proof
message RequestVerifyFraudProof {
  FraudProof fraud_proof = 1;
  bytes expected_valid_app_hash = 2;
}

//----------------------------------------
// Response types

message Response {
  oneof value {
    tendermint.abci.ResponseException          exception            = 1;
    tendermint.abci.ResponseEcho               echo                 = 2;
    tendermint.abci.ResponseFlush              flush                = 3;
    tendermint.abci.ResponseInfo               info                 = 4;
    tendermint.abci.ResponseSetOption          set_option           = 5;
    tendermint.abci.ResponseInitChain          init_chain           = 6;
    tendermint.abci.ResponseQuery              query                = 7;
    tendermint.abci.ResponseBeginBlock         begin_block          = 8;
    tendermint.abci.ResponseCheckTx            check_tx             = 9;
    tendermint.abci.ResponseDeliverTx          deliver_tx           = 10;
    tendermint.abci.ResponseEndBlock           end_block            = 11;
    tendermint.abci.ResponseCommit             commit               = 12;
    tendermint.abci.ResponseListSnapshots      list_snapshots       = 13;
    tendermint.abci.ResponseOfferSnapshot      offer_snapshot       = 14;
    tendermint.abci.ResponseLoadSnapshotChunk  load_snapshot_chunk  = 15;
    tendermint.abci.ResponseApplySnapshotChunk apply_snapshot_chunk = 16;
    ResponseGetAppHash         get_app_hash         = 17;
    ResponseGenerateFraudProof generate_fraud_proof = 18;
    ResponseVerifyFraudProof   verify_fraud_proof   = 19;
  }
}

message ResponseGetAppHash {
  bytes app_hash = 1;
}

message ResponseGenerateFraudProof {
  FraudProof fraud_proof = 1;
}

message ResponseVerifyFraudProof {
  bool success = 1;
}

// Represents a single-round fraudProof
message FraudProof {
  int64 block_height = 1;
  bytes pre_state_app_hash = 2;
  bytes expected_valid_app_hash = 3;
  map<string, StateWitness> state_witness = 4;

  tendermint.abci.RequestBeginBlock fraudulent_begin_block = 5;
  tendermint.abci.RequestDeliverTx fraudulent_deliver_tx = 6;
  tendermint.abci.RequestEndBlock fraudulent_end_block = 7;
}

// State witness with a list of all witness data
message StateWitness {
  // store level proof
  tendermint.crypto.ProofOp proof = 1;
  // substore level hash
  bytes root_hash = 2;
  // List of witness data
  repeated WitnessData witness_data = 3;
}

// Witness data containing a key/value pair and a Merkle proof for said key/value pair
message WitnessData {
  Operation operation = 1;
  bytes key = 2;
  bytes value = 3;
  repeated tendermint.crypto.ProofOp proofs = 4;
}

enum Operation {
   WRITE     = 0 [(gogoproto.enumvalue_customname) = "write"];
   READ      = 1 [(gogoproto.enumvalue_customname) = "read"];
   DELETE    = 2 [(gogoproto.enumvalue_customname) = "delete"];
}